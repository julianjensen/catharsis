running it on catharsis, data size: 105
running it on closure-library, data size: 2616
running it on jsdoc, data size: 109
running it on jsduck, data size: 40
running it on ts, data size: 31

[0m[0m
[0m  parser[0m
[0m    parse()[0m
    [32m  âœ“[0m[90m can parse types in the "basic" spec [0m
    [32m  âœ“[0m[90m can parse types in the "function-type" spec [0m[33m(54ms)[0m
    [32m  âœ“[0m[90m can parse types in the "nullable" spec [0m
    [32m  âœ“[0m[90m can parse types in the "record-type" spec [0m
    [32m  âœ“[0m[90m can parse types in the "type-application" spec [0m
    [32m  âœ“[0m[90m can parse types in the "type-intersection" spec [0m[33m(38ms)[0m
    [32m  âœ“[0m[90m can parse types in the "type-tuple" spec [0m
    [32m  âœ“[0m[90m can parse types in the "type-union" spec [0m
    [32m  âœ“[0m[90m can parse types in the "jsdoc" spec when JSDoc type parsing is enabled [0m
[0m    perse() external types[0m
name: catharsis, count: 105, errors: 0
    [32m  âœ“[0m[90m can parse types from the catharsis list [0m[33m(73ms)[0m
ERROR: "!Function="
   ast:
 { type: 'NameExpression', name: 'Function', optional: true }


ERROR: "!Object<string, function(string, ...)>"
   ast:
 { type: 'TypeApplication',
  expression: { type: 'NameExpression', name: 'Object' },
  applications: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'FunctionType',
       params: 
        [ { type: 'NameExpression', name: 'string' },
          { repeatable: true, type: 'NullLiteral' },
          [length]: 2 ] },
     [length]: 2 ] }


ERROR: "(function(number):?string)="
   ast:
 { type: 'FunctionType',
  params: [ { type: 'NameExpression', name: 'number' }, [length]: 1 ],
  result: { type: 'NameExpression', name: 'string', nullable: true },
  optional: true }


ERROR: "(function(string))?"
   ast:
 { type: 'FunctionType',
  params: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ],
  nullable: true }


ERROR: "(function(string): boolean)|undefined"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ],
       result: { type: 'NameExpression', name: 'boolean' } },
     { type: 'UndefinedLiteral' },
     [length]: 2 ] }


ERROR: "(function(string, *, *): ?string)="
   ast:
 { type: 'FunctionType',
  params: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'AllLiteral' },
     { type: 'AllLiteral' },
     [length]: 3 ],
  result: { type: 'NameExpression', name: 'string', nullable: true },
  optional: true }


ERROR: "?(function(this:THIS, *): *)="
   ast:
 { type: 'FunctionType',
  params: [ { type: 'AllLiteral' }, [length]: 1 ],
  result: { type: 'AllLiteral' },
  this: { type: 'NameExpression', name: 'THIS' },
  nullable: true,
  optional: true }


ERROR: "?(function(this:THIS, TYPE): VALUE)="
   ast:
 { type: 'FunctionType',
  params: [ { type: 'NameExpression', name: 'TYPE' }, [length]: 1 ],
  result: { type: 'NameExpression', name: 'VALUE' },
  this: { type: 'NameExpression', name: 'THIS' },
  nullable: true,
  optional: true }


ERROR: "?(function(this:THIS, TYPE):?)="
   ast:
 { type: 'FunctionType',
  params: [ { type: 'NameExpression', name: 'TYPE' }, [length]: 1 ],
  result: { type: 'UnknownLiteral' },
  this: { type: 'NameExpression', name: 'THIS' },
  nullable: true,
  optional: true }


ERROR: "?="
   ast:
 { type: 'UnknownLiteral', optional: true }


ERROR: "?function(this:T, ...)"
   ast:
 { type: 'FunctionType',
  params: [ { repeatable: true, type: 'NullLiteral' }, [length]: 1 ],
  this: { type: 'NameExpression', name: 'T' },
  nullable: true }


ERROR: "Function="
   ast:
 { type: 'NameExpression', name: 'Function', optional: true }


ERROR: "function(...): boolean"
   ast:
 { type: 'FunctionType',
  params: [ { repeatable: true, type: 'NullLiteral' }, [length]: 1 ],
  result: { type: 'NameExpression', name: 'boolean' } }


ERROR: "function(...): null"
   ast:
 { type: 'FunctionType',
  params: [ { repeatable: true, type: 'NullLiteral' }, [length]: 1 ],
  result: { type: 'NullLiteral' } }


ERROR: "function(?):?|string"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
       result: { type: 'UnknownLiteral' } },
     { type: 'NameExpression', name: 'string' },
     [length]: 2 ] }
parsed:
 { type: 'FunctionType',
  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
  result: 
   { type: 'TypeUnion',
     elements: 
      [ { type: 'UnknownLiteral' },
        { type: 'NameExpression', name: 'string' },
        [length]: 2 ],
     [FunctionSignatureType]: undefined } }


ERROR: "function(?):?|{handleEvent:function(?):?}|null"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
       result: { type: 'UnknownLiteral' } },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
               result: { type: 'UnknownLiteral' } } },
          [length]: 1 ] },
     { type: 'NullLiteral' },
     [length]: 3 ] }
parsed:
 { type: 'FunctionType',
  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
  result: 
   { type: 'TypeUnion',
     elements: 
      [ { type: 'UnknownLiteral' },
        { type: 'RecordType',
          fields: 
           [ { type: 'FieldType',
               key: { type: 'NameExpression', name: 'handleEvent' },
               value: 
                { type: 'FunctionType',
                  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
                  result: { type: 'UnknownLiteral', [FunctionSignatureType]: undefined } } },
             [length]: 1 ] },
        { type: 'NullLiteral' },
        [length]: 3 ],
     [FunctionSignatureType]: undefined } }


ERROR: "function(?, ?, ?): number | function(?, ?): number"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: 
        [ { type: 'UnknownLiteral' },
          { type: 'UnknownLiteral' },
          { type: 'UnknownLiteral' },
          [length]: 3 ],
       result: { type: 'NameExpression', name: 'number' } },
     { type: 'FunctionType',
       params: 
        [ { type: 'UnknownLiteral' },
          { type: 'UnknownLiteral' },
          [length]: 2 ],
       result: { type: 'NameExpression', name: 'number' } },
     [length]: 2 ] }
parsed:
 { type: 'FunctionType',
  params: 
   [ { type: 'UnknownLiteral' },
     { type: 'UnknownLiteral' },
     { type: 'UnknownLiteral' },
     [length]: 3 ],
  result: 
   { type: 'TypeUnion',
     elements: 
      [ { type: 'NameExpression', name: 'number' },
        { type: 'FunctionType',
          params: 
           [ { type: 'UnknownLiteral' },
             { type: 'UnknownLiteral' },
             [length]: 2 ],
          result: 
           { type: 'NameExpression',
             name: 'number',
             [FunctionSignatureType]: undefined } },
        [length]: 2 ],
     [FunctionSignatureType]: undefined } }


ERROR: "function(EVENTOBJ):?|{handleEvent:function(?):?}|null="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
       result: { type: 'UnknownLiteral' } },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
               result: { type: 'UnknownLiteral' } } },
          [length]: 1 ] },
     { type: 'NullLiteral', optional: true },
     [length]: 3 ] }
parsed:
 { type: 'FunctionType',
  params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
  result: 
   { type: 'TypeUnion',
     elements: 
      [ { type: 'UnknownLiteral' },
        { type: 'RecordType',
          fields: 
           [ { type: 'FieldType',
               key: { type: 'NameExpression', name: 'handleEvent' },
               value: 
                { type: 'FunctionType',
                  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
                  result: { type: 'UnknownLiteral', [FunctionSignatureType]: undefined } } },
             [length]: 1 ] },
        { type: 'NullLiteral', optional: true },
        [length]: 3 ],
     [FunctionSignatureType]: undefined } }


ERROR: "function(EVENTOBJ):?|{handleEvent:function(?):?}|null"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
       result: { type: 'UnknownLiteral' } },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
               result: { type: 'UnknownLiteral' } } },
          [length]: 1 ] },
     { type: 'NullLiteral' },
     [length]: 3 ] }
parsed:
 { type: 'FunctionType',
  params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
  result: 
   { type: 'TypeUnion',
     elements: 
      [ { type: 'UnknownLiteral' },
        { type: 'RecordType',
          fields: 
           [ { type: 'FieldType',
               key: { type: 'NameExpression', name: 'handleEvent' },
               value: 
                { type: 'FunctionType',
                  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
                  result: { type: 'UnknownLiteral', [FunctionSignatureType]: undefined } } },
             [length]: 1 ] },
        { type: 'NullLiteral' },
        [length]: 3 ],
     [FunctionSignatureType]: undefined } }


ERROR: "function(Element):Element?"
   ast:
 { type: 'FunctionType',
  params: [ { type: 'NameExpression', name: 'Element' }, [length]: 1 ],
  result: { type: 'NameExpression', name: 'Element' },
  nullable: true }
parsed:
 { type: 'FunctionType',
  params: [ { type: 'NameExpression', name: 'Element' }, [length]: 1 ],
  result: 
   { type: 'NameExpression',
     name: 'Element',
     nullable: true,
     [FunctionSignatureType]: undefined } }


ERROR: "function(new: T, ...)"
   ast:
 { type: 'FunctionType',
  params: [ { repeatable: true, type: 'NullLiteral' }, [length]: 1 ],
  new: { type: 'NameExpression', name: 'T' } }


ERROR: "function(new:T, ...)"
   ast:
 { type: 'FunctionType',
  params: [ { repeatable: true, type: 'NullLiteral' }, [length]: 1 ],
  new: { type: 'NameExpression', name: 'T' } }


ERROR: "function(this:SCOPE, ?):?|{handleEvent:function(?):?}|null"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
       result: { type: 'UnknownLiteral' },
       this: { type: 'NameExpression', name: 'SCOPE' } },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
               result: { type: 'UnknownLiteral' } } },
          [length]: 1 ] },
     { type: 'NullLiteral' },
     [length]: 3 ] }
parsed:
 { type: 'FunctionType',
  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
  this: { type: 'NameExpression', name: 'SCOPE' },
  result: 
   { type: 'TypeUnion',
     elements: 
      [ { type: 'UnknownLiteral' },
        { type: 'RecordType',
          fields: 
           [ { type: 'FieldType',
               key: { type: 'NameExpression', name: 'handleEvent' },
               value: 
                { type: 'FunctionType',
                  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
                  result: { type: 'UnknownLiteral', [FunctionSignatureType]: undefined } } },
             [length]: 1 ] },
        { type: 'NullLiteral' },
        [length]: 3 ],
     [FunctionSignatureType]: undefined } }


ERROR: "function(this:SCOPE, EVENTOBJ):?|{handleEvent:function(?):?}|null="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
       result: { type: 'UnknownLiteral' },
       this: { type: 'NameExpression', name: 'SCOPE' } },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
               result: { type: 'UnknownLiteral' } } },
          [length]: 1 ] },
     { type: 'NullLiteral', optional: true },
     [length]: 3 ] }
parsed:
 { type: 'FunctionType',
  params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
  this: { type: 'NameExpression', name: 'SCOPE' },
  result: 
   { type: 'TypeUnion',
     elements: 
      [ { type: 'UnknownLiteral' },
        { type: 'RecordType',
          fields: 
           [ { type: 'FieldType',
               key: { type: 'NameExpression', name: 'handleEvent' },
               value: 
                { type: 'FunctionType',
                  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
                  result: { type: 'UnknownLiteral', [FunctionSignatureType]: undefined } } },
             [length]: 1 ] },
        { type: 'NullLiteral', optional: true },
        [length]: 3 ],
     [FunctionSignatureType]: undefined } }


ERROR: "function(this:T, ?):?|{handleEvent:function(?):?}|null"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
       result: { type: 'UnknownLiteral' },
       this: { type: 'NameExpression', name: 'T' } },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
               result: { type: 'UnknownLiteral' } } },
          [length]: 1 ] },
     { type: 'NullLiteral' },
     [length]: 3 ] }
parsed:
 { type: 'FunctionType',
  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
  this: { type: 'NameExpression', name: 'T' },
  result: 
   { type: 'TypeUnion',
     elements: 
      [ { type: 'UnknownLiteral' },
        { type: 'RecordType',
          fields: 
           [ { type: 'FieldType',
               key: { type: 'NameExpression', name: 'handleEvent' },
               value: 
                { type: 'FunctionType',
                  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
                  result: { type: 'UnknownLiteral', [FunctionSignatureType]: undefined } } },
             [length]: 1 ] },
        { type: 'NullLiteral' },
        [length]: 3 ],
     [FunctionSignatureType]: undefined } }


ERROR: "function(this:T, ?):?|{handleEvent:function(this:T, ?):?}|null"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
       result: { type: 'UnknownLiteral' },
       this: { type: 'NameExpression', name: 'T' } },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
               result: { type: 'UnknownLiteral' },
               this: { type: 'NameExpression', name: 'T' } } },
          [length]: 1 ] },
     { type: 'NullLiteral' },
     [length]: 3 ] }
parsed:
 { type: 'FunctionType',
  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
  this: { type: 'NameExpression', name: 'T' },
  result: 
   { type: 'TypeUnion',
     elements: 
      [ { type: 'UnknownLiteral' },
        { type: 'RecordType',
          fields: 
           [ { type: 'FieldType',
               key: { type: 'NameExpression', name: 'handleEvent' },
               value: 
                { type: 'FunctionType',
                  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
                  this: { type: 'NameExpression', name: 'T' },
                  result: { type: 'UnknownLiteral', [FunctionSignatureType]: undefined } } },
             [length]: 1 ] },
        { type: 'NullLiteral' },
        [length]: 3 ],
     [FunctionSignatureType]: undefined } }


ERROR: "function(this:T, EVENTOBJ):?|{handleEvent:function(?):?}|null"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
       result: { type: 'UnknownLiteral' },
       this: { type: 'NameExpression', name: 'T' } },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
               result: { type: 'UnknownLiteral' } } },
          [length]: 1 ] },
     { type: 'NullLiteral' },
     [length]: 3 ] }
parsed:
 { type: 'FunctionType',
  params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
  this: { type: 'NameExpression', name: 'T' },
  result: 
   { type: 'TypeUnion',
     elements: 
      [ { type: 'UnknownLiteral' },
        { type: 'RecordType',
          fields: 
           [ { type: 'FieldType',
               key: { type: 'NameExpression', name: 'handleEvent' },
               value: 
                { type: 'FunctionType',
                  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
                  result: { type: 'UnknownLiteral', [FunctionSignatureType]: undefined } } },
             [length]: 1 ] },
        { type: 'NullLiteral' },
        [length]: 3 ],
     [FunctionSignatureType]: undefined } }


ERROR: "function(this:T, EVENTOBJ):?|{handleEvent:function(this:T, ?):?}"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
       result: { type: 'UnknownLiteral' },
       this: { type: 'NameExpression', name: 'T' } },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
               result: { type: 'UnknownLiteral' },
               this: { type: 'NameExpression', name: 'T' } } },
          [length]: 1 ] },
     [length]: 2 ] }
parsed:
 { type: 'FunctionType',
  params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
  this: { type: 'NameExpression', name: 'T' },
  result: 
   { type: 'TypeUnion',
     elements: 
      [ { type: 'UnknownLiteral' },
        { type: 'RecordType',
          fields: 
           [ { type: 'FieldType',
               key: { type: 'NameExpression', name: 'handleEvent' },
               value: 
                { type: 'FunctionType',
                  params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
                  this: { type: 'NameExpression', name: 'T' },
                  result: { type: 'UnknownLiteral', [FunctionSignatureType]: undefined } } },
             [length]: 1 ] },
        [length]: 2 ],
     [FunctionSignatureType]: undefined } }


ERROR: "goog.testing.mockmatchers.ArgumentMatcher|Function="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression',
       name: 'goog.testing.mockmatchers.ArgumentMatcher' },
     { type: 'NameExpression', name: 'Function', optional: true },
     [length]: 2 ] }


ERROR: "{'args': !Array<string>, 'timestamp': number}"
   ast:
 { type: 'RecordType',
  fields: 
   [ { type: 'FieldType',
       key: { type: 'NameExpression', name: 'args' },
       value: 
        { type: 'TypeApplication',
          expression: { type: 'NameExpression', name: 'Array' },
          applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] } },
     { type: 'FieldType',
       key: { type: 'NameExpression', name: 'timestamp' },
       value: { type: 'NameExpression', name: 'number' } },
     [length]: 2 ] }
parsed:
 { type: 'RecordType',
  fields: 
   [ { type: 'FieldType',
       key: { type: 'NameExpression', name: '\'args\'' },
       value: 
        { type: 'TypeApplication',
          expression: { type: 'NameExpression', name: 'Array' },
          applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] } },
     { type: 'FieldType',
       key: { type: 'NameExpression', name: '\'timestamp\'' },
       value: { type: 'NameExpression', name: 'number' } },
     [length]: 2 ] }


ERROR: "{'timestamp': number, 'args': !Array<string>}"
   ast:
 { type: 'RecordType',
  fields: 
   [ { type: 'FieldType',
       key: { type: 'NameExpression', name: 'timestamp' },
       value: { type: 'NameExpression', name: 'number' } },
     { type: 'FieldType',
       key: { type: 'NameExpression', name: 'args' },
       value: 
        { type: 'TypeApplication',
          expression: { type: 'NameExpression', name: 'Array' },
          applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] } },
     [length]: 2 ] }
parsed:
 { type: 'RecordType',
  fields: 
   [ { type: 'FieldType',
       key: { type: 'NameExpression', name: '\'timestamp\'' },
       value: { type: 'NameExpression', name: 'number' } },
     { type: 'FieldType',
       key: { type: 'NameExpression', name: '\'args\'' },
       value: 
        { type: 'TypeApplication',
          expression: { type: 'NameExpression', name: 'Array' },
          applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] } },
     [length]: 2 ] }


name: closure-library, count: 2599, errors: 31
    [32m  âœ“[0m[90m can parse types from the closure-library list [0m[31m(849ms)[0m
name: jsdoc, count: 109, errors: 0
    [32m  âœ“[0m[90m can parse types from the jsdoc list [0m
ERROR: ""up"/"down""
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: '"up"' },
     { type: 'NameExpression', name: '"down"' },
     [length]: 2 ] }


ERROR: "HTMLElement/Ext.Element"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'HTMLElement' },
     { type: 'NameExpression', name: 'Ext.Element' },
     [length]: 2 ] }
parsed:
 { type: 'NameExpression', name: 'HTMLElement/Ext.Element' }


ERROR: "HTMLElement/Ext.core.Element"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'HTMLElement' },
     { type: 'NameExpression', name: 'Ext.core.Element' },
     [length]: 2 ] }
parsed:
 { type: 'NameExpression', name: 'HTMLElement/Ext.core.Element' }


ERROR: "Mixed..."
   ast:
 { type: 'NameExpression', name: 'Mixed', repeatable: true }


ERROR: "Number..."
   ast:
 { type: 'NameExpression', name: 'Number', repeatable: true }


ERROR: "Number/Object..."
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Number' },
     { type: 'NameExpression', name: 'Object' },
     [length]: 2 ],
  repeatable: true }


ERROR: "Number/String"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Number' },
     { type: 'NameExpression', name: 'String' },
     [length]: 2 ] }
parsed:
 { type: 'NameExpression', name: 'Number/String' }


ERROR: "Object..."
   ast:
 { type: 'NameExpression', name: 'Object', repeatable: true }


ERROR: "String..."
   ast:
 { type: 'NameExpression', name: 'String', repeatable: true }


ERROR: "String/Function"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'String' },
     { type: 'NameExpression', name: 'Function' },
     [length]: 2 ] }
parsed:
 { type: 'NameExpression', name: 'String/Function' }


ERROR: "String/HTMLElement/Ext.Element"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'String' },
     { type: 'NameExpression', name: 'HTMLElement' },
     { type: 'NameExpression', name: 'Ext.Element' },
     [length]: 3 ] }
parsed:
 { type: 'NameExpression',
  name: 'String/HTMLElement/Ext.Element' }


ERROR: "String/RegExp"
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'String' },
     { type: 'NameExpression', name: 'RegExp' },
     [length]: 2 ] }
parsed:
 { type: 'NameExpression', name: 'String/RegExp' }


name: jsduck, count: 34, errors: 12
    [32m  âœ“[0m[90m can parse types from the jsduck list [0m
name: ts, count: 31, errors: 0
    [32m  âœ“[0m[90m can parse types from the ts list [0m


[92m [0m[32m 14 passing[0m[90m (1s)[0m

