running it on catharsis, data size: 105
running it on closure-library, data size: 2616
running it on jsdoc, data size: 109
running it on jsduck, data size: 40
running it on ts, data size: 31

[0m[0m
[0m  parser[0m
[0m    parse()[0m
    [31m  1) can parse types in the "basic" spec[0m
    [31m  2) can parse types in the "function-type" spec[0m
    [32m  âœ“[0m[90m can parse types in the "nullable" spec [0m
    [32m  âœ“[0m[90m can parse types in the "record-type" spec [0m
    [32m  âœ“[0m[90m can parse types in the "type-application" spec [0m
    [32m  âœ“[0m[90m can parse types in the "type-intersection" spec [0m
    [32m  âœ“[0m[90m can parse types in the "type-tuple" spec [0m
    [32m  âœ“[0m[90m can parse types in the "type-union" spec [0m
    [31m  3) can parse types in the "jsdoc" spec when JSDoc type parsing is enabled[0m
[0m    perse() external types[0m
name: catharsis, count: 105, errors: 0
    [32m  âœ“[0m[90m can parse types from the catharsis list [0m
ERROR: "!Element|!Document="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Element' },
     { type: 'NameExpression', name: 'Document', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Element' },
     { type: 'NameExpression', name: 'Document' },
     [length]: 2 ],
  optional: true }


ERROR: "Array<T>|Object<?,T>="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Array' },
       applications: [ { type: 'NameExpression', name: 'T' }, [length]: 1 ] },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Object' },
       applications: 
        [ { type: 'UnknownLiteral' },
          { type: 'NameExpression', name: 'T' },
          [length]: 2 ],
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Array' },
       applications: [ { type: 'NameExpression', name: 'T' }, [length]: 1 ] },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Object' },
       applications: 
        [ { type: 'UnknownLiteral' },
          { type: 'NameExpression', name: 'T' },
          [length]: 2 ] },
     [length]: 2 ],
  optional: true }


ERROR: "Array<string>|string="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Array' },
       applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] },
     { type: 'NameExpression', name: 'string', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Array' },
       applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] },
     { type: 'NameExpression', name: 'string' },
     [length]: 2 ],
  optional: true }


ERROR: "ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'ArrayBuffer' },
     { type: 'NameExpression', name: 'ArrayBufferView' },
     { type: 'NameExpression', name: 'Blob' },
     { type: 'NameExpression', name: 'Document' },
     { type: 'NameExpression', name: 'FormData' },
     { type: 'NameExpression', name: 'string', optional: true },
     [length]: 6 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'ArrayBuffer' },
     { type: 'NameExpression', name: 'ArrayBufferView' },
     { type: 'NameExpression', name: 'Blob' },
     { type: 'NameExpression', name: 'Document' },
     { type: 'NameExpression', name: 'FormData' },
     { type: 'NameExpression', name: 'string' },
     [length]: 6 ],
  optional: true }


ERROR: "Element|Document="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Element' },
     { type: 'NameExpression', name: 'Document', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Element' },
     { type: 'NameExpression', name: 'Document' },
     [length]: 2 ],
  optional: true }


ERROR: "Element|DocumentFragment="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Element' },
     { type: 'NameExpression',
       name: 'DocumentFragment',
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Element' },
     { type: 'NameExpression', name: 'DocumentFragment' },
     [length]: 2 ],
  optional: true }


ERROR: "Element|string="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Element' },
     { type: 'NameExpression', name: 'string', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Element' },
     { type: 'NameExpression', name: 'string' },
     [length]: 2 ],
  optional: true }


ERROR: "Element|string|function():Element="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Element' },
     { type: 'NameExpression', name: 'string' },
     { type: 'FunctionType',
       params: [ [length]: 0 ],
       result: { type: 'NameExpression', name: 'Element' },
       optional: true },
     [length]: 3 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Element' },
     { type: 'NameExpression', name: 'string' },
     { type: 'FunctionType',
       result: { type: 'NameExpression', name: 'Element' },
       params: [ [length]: 0 ] },
     [length]: 3 ],
  optional: true }


ERROR: "Error|Object="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Error' },
     { type: 'NameExpression', name: 'Object', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Error' },
     { type: 'NameExpression', name: 'Object' },
     [length]: 2 ],
  optional: true }


ERROR: "Node|string="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Node' },
     { type: 'NameExpression', name: 'string', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Node' },
     { type: 'NameExpression', name: 'string' },
     [length]: 2 ],
  optional: true }


ERROR: "Object|goog.structs.Map="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Object' },
     { type: 'NameExpression',
       name: 'goog.structs.Map',
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Object' },
     { type: 'NameExpression', name: 'goog.structs.Map' },
     [length]: 2 ],
  optional: true }


ERROR: "Object|string="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Object' },
     { type: 'NameExpression', name: 'string', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Object' },
     { type: 'NameExpression', name: 'string' },
     [length]: 2 ],
  optional: true }


ERROR: "boolean|!Object<string>="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'boolean' },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Object' },
       applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ],
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'boolean' },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Object' },
       applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] },
     [length]: 2 ],
  optional: true }


ERROR: "boolean|string|number="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'boolean' },
     { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number', optional: true },
     [length]: 3 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'boolean' },
     { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number' },
     [length]: 3 ],
  optional: true }


ERROR: "function(EVENTOBJ):?|{handleEvent:function(?):?}|null="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
       result: { type: 'UnknownLiteral' } },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
               result: { type: 'UnknownLiteral' } } },
          [length]: 1 ] },
     { type: 'NullLiteral', optional: true },
     [length]: 3 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       result: { type: 'UnknownLiteral' },
       params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ] },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               result: { type: 'UnknownLiteral' },
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ] } },
          [length]: 1 ] },
     { type: 'NullLiteral' },
     [length]: 3 ],
  optional: true }


ERROR: "function(Element):Element?"
   ast:
 { type: 'FunctionType',
  params: [ { type: 'NameExpression', name: 'Element' }, [length]: 1 ],
  result: { type: 'NameExpression', name: 'Element' },
  nullable: true }
parsed:
 { type: 'FunctionType',
  result: { type: 'NameExpression', name: 'Element', nullable: true },
  params: [ { type: 'NameExpression', name: 'Element' }, [length]: 1 ] }


ERROR: "function(this:SCOPE, EVENTOBJ):?|{handleEvent:function(?):?}|null="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
       result: { type: 'UnknownLiteral' },
       this: { type: 'NameExpression', name: 'SCOPE' } },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ],
               result: { type: 'UnknownLiteral' } } },
          [length]: 1 ] },
     { type: 'NullLiteral', optional: true },
     [length]: 3 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'FunctionType',
       result: { type: 'UnknownLiteral' },
       params: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
       this: { type: 'NameExpression', name: 'SCOPE' } },
     { type: 'RecordType',
       fields: 
        [ { type: 'FieldType',
            key: { type: 'NameExpression', name: 'handleEvent' },
            value: 
             { type: 'FunctionType',
               result: { type: 'UnknownLiteral' },
               params: [ { type: 'UnknownLiteral' }, [length]: 1 ] } },
          [length]: 1 ] },
     { type: 'NullLiteral' },
     [length]: 3 ],
  optional: true }


ERROR: "goog.date.Date|Date="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'goog.date.Date' },
     { type: 'NameExpression', name: 'Date', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'goog.date.Date' },
     { type: 'NameExpression', name: 'Date' },
     [length]: 2 ],
  optional: true }


ERROR: "goog.dom.DomHelper|Array<goog.dom.DomHelper>="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'goog.dom.DomHelper' },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Array' },
       applications: 
        [ { type: 'NameExpression', name: 'goog.dom.DomHelper' },
          [length]: 1 ],
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'goog.dom.DomHelper' },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Array' },
       applications: 
        [ { type: 'NameExpression', name: 'goog.dom.DomHelper' },
          [length]: 1 ] },
     [length]: 2 ],
  optional: true }


ERROR: "goog.events.BrowserEvent|goog.math.Coordinate="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'goog.events.BrowserEvent' },
     { type: 'NameExpression',
       name: 'goog.math.Coordinate',
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'goog.events.BrowserEvent' },
     { type: 'NameExpression', name: 'goog.math.Coordinate' },
     [length]: 2 ],
  optional: true }


ERROR: "goog.structs.Heap|Object="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'goog.structs.Heap' },
     { type: 'NameExpression', name: 'Object', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'goog.structs.Heap' },
     { type: 'NameExpression', name: 'Object' },
     [length]: 2 ],
  optional: true }


ERROR: "goog.structs.Trie<VALUE>|Object<string, VALUE>="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'goog.structs.Trie' },
       applications: [ { type: 'NameExpression', name: 'VALUE' }, [length]: 1 ] },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Object' },
       applications: 
        [ { type: 'NameExpression', name: 'string' },
          { type: 'NameExpression', name: 'VALUE' },
          [length]: 2 ],
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'goog.structs.Trie' },
       applications: [ { type: 'NameExpression', name: 'VALUE' }, [length]: 1 ] },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Object' },
       applications: 
        [ { type: 'NameExpression', name: 'string' },
          { type: 'NameExpression', name: 'VALUE' },
          [length]: 2 ] },
     [length]: 2 ],
  optional: true }


ERROR: "goog.testing.mockmatchers.ArgumentMatcher|Function="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression',
       name: 'goog.testing.mockmatchers.ArgumentMatcher' },
     { type: 'NameExpression', name: 'Function', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression',
       name: 'goog.testing.mockmatchers.ArgumentMatcher' },
     { type: 'NameExpression', name: 'Function' },
     [length]: 2 ],
  optional: true }


ERROR: "number|Object="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'Object', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'Object' },
     [length]: 2 ],
  optional: true }


ERROR: "number|goog.date.DateLike="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression',
       name: 'goog.date.DateLike',
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'goog.date.DateLike' },
     [length]: 2 ],
  optional: true }


ERROR: "number|string="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'string', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'string' },
     [length]: 2 ],
  optional: true }


ERROR: "string|!goog.events.EventId<EVENTOBJ>="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'goog.events.EventId' },
       applications: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ],
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'goog.events.EventId' },
       applications: [ { type: 'NameExpression', name: 'EVENTOBJ' }, [length]: 1 ] },
     [length]: 2 ],
  optional: true }


ERROR: "string|!goog.events.EventId="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression',
       name: 'goog.events.EventId',
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'goog.events.EventId' },
     [length]: 2 ],
  optional: true }


ERROR: "string|!goog.html.SafeUrl="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression',
       name: 'goog.html.SafeUrl',
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'goog.html.SafeUrl' },
     [length]: 2 ],
  optional: true }


ERROR: "string|Array<string>="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Array' },
       applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ],
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Array' },
       applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] },
     [length]: 2 ],
  optional: true }


ERROR: "string|Error="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'Error', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'Error' },
     [length]: 2 ],
  optional: true }


ERROR: "string|boolean="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'boolean', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'boolean' },
     [length]: 2 ],
  optional: true }


ERROR: "string|goog.Uri.QueryData="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression',
       name: 'goog.Uri.QueryData',
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'goog.Uri.QueryData' },
     [length]: 2 ],
  optional: true }


ERROR: "string|number="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number' },
     [length]: 2 ],
  optional: true }


ERROR: "string|number|boolean="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'boolean', optional: true },
     [length]: 3 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'boolean' },
     [length]: 3 ],
  optional: true }


ERROR: "string|number|boolean|null="
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'boolean' },
     { type: 'NullLiteral', optional: true },
     [length]: 4 ] }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'boolean' },
     { type: 'NullLiteral' },
     [length]: 4 ],
  optional: true }


ERROR: "{'args': !Array<string>, 'timestamp': number}"
   ast:
 { type: 'RecordType',
  fields: 
   [ { type: 'FieldType',
       key: { type: 'NameExpression', name: 'args' },
       value: 
        { type: 'TypeApplication',
          expression: { type: 'NameExpression', name: 'Array' },
          applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] } },
     { type: 'FieldType',
       key: { type: 'NameExpression', name: 'timestamp' },
       value: { type: 'NameExpression', name: 'number' } },
     [length]: 2 ] }
parsed:
 { type: 'RecordType',
  fields: 
   [ { type: 'FieldType',
       key: { type: 'NameExpression', name: '\'args\'' },
       value: 
        { type: 'TypeApplication',
          expression: { type: 'NameExpression', name: 'Array' },
          applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] } },
     { type: 'FieldType',
       key: { type: 'NameExpression', name: '\'timestamp\'' },
       value: { type: 'NameExpression', name: 'number' } },
     [length]: 2 ] }


ERROR: "{'timestamp': number, 'args': !Array<string>}"
   ast:
 { type: 'RecordType',
  fields: 
   [ { type: 'FieldType',
       key: { type: 'NameExpression', name: 'timestamp' },
       value: { type: 'NameExpression', name: 'number' } },
     { type: 'FieldType',
       key: { type: 'NameExpression', name: 'args' },
       value: 
        { type: 'TypeApplication',
          expression: { type: 'NameExpression', name: 'Array' },
          applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] } },
     [length]: 2 ] }
parsed:
 { type: 'RecordType',
  fields: 
   [ { type: 'FieldType',
       key: { type: 'NameExpression', name: '\'timestamp\'' },
       value: { type: 'NameExpression', name: 'number' } },
     { type: 'FieldType',
       key: { type: 'NameExpression', name: '\'args\'' },
       value: 
        { type: 'TypeApplication',
          expression: { type: 'NameExpression', name: 'Array' },
          applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] } },
     [length]: 2 ] }


name: closure-library, count: 2616, errors: 38
    [32m  âœ“[0m[90m can parse types from the closure-library list [0m[31m(605ms)[0m
ERROR: "module:jsdoc/tag/dictionary"
   ast:
 { type: 'NameExpression', name: 'module:jsdoc/tag/dictionary' }
parsed:
 { type: 'StringLiteral',
  string: 'jsdoc/tag/dictionary',
  raw: 'jsdoc/tag/dictionary',
  name: 'module:undefined' }


name: jsdoc, count: 109, errors: 1
    [32m  âœ“[0m[90m can parse types from the jsdoc list [0m
ERROR: "Number/Object..."
   ast:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Number' },
     { type: 'NameExpression', name: 'Object' },
     [length]: 2 ],
  repeatable: true }
parsed:
 { type: 'TypeUnion',
  elements: 
   [ { type: 'NameExpression', name: 'Number' },
     { type: 'NameExpression', name: 'Object', repeatable: true },
     [length]: 2 ] }


name: jsduck, count: 40, errors: 1
    [32m  âœ“[0m[90m can parse types from the jsduck list [0m
ERROR: "string&number="
   ast:
 { type: 'TypeIntersection',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number', optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeIntersection',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number' },
     [length]: 2 ],
  optional: true }


ERROR: "string&number&boolean="
   ast:
 { type: 'TypeIntersection',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'boolean', optional: true },
     [length]: 3 ] }
parsed:
 { type: 'TypeIntersection',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'boolean' },
     [length]: 3 ],
  optional: true }


ERROR: "string&number&boolean&null="
   ast:
 { type: 'TypeIntersection',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'boolean' },
     { type: 'NullLiteral', optional: true },
     [length]: 4 ] }
parsed:
 { type: 'TypeIntersection',
  elements: 
   [ { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number' },
     { type: 'NameExpression', name: 'boolean' },
     { type: 'NullLiteral' },
     [length]: 4 ],
  optional: true }


ERROR: "boolean&!Object<string>="
   ast:
 { type: 'TypeIntersection',
  elements: 
   [ { type: 'NameExpression', name: 'boolean' },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Object' },
       applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ],
       optional: true },
     [length]: 2 ] }
parsed:
 { type: 'TypeIntersection',
  elements: 
   [ { type: 'NameExpression', name: 'boolean' },
     { type: 'TypeApplication',
       expression: { type: 'NameExpression', name: 'Object' },
       applications: [ { type: 'NameExpression', name: 'string' }, [length]: 1 ] },
     [length]: 2 ],
  optional: true }


ERROR: "boolean&string&number="
   ast:
 { type: 'TypeIntersection',
  elements: 
   [ { type: 'NameExpression', name: 'boolean' },
     { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number', optional: true },
     [length]: 3 ] }
parsed:
 { type: 'TypeIntersection',
  elements: 
   [ { type: 'NameExpression', name: 'boolean' },
     { type: 'NameExpression', name: 'string' },
     { type: 'NameExpression', name: 'number' },
     [length]: 3 ],
  optional: true }


name: ts, count: 31, errors: 5
    [32m  âœ“[0m[90m can parse types from the ts list [0m


[92m [0m[32m 11 passing[0m[90m (807ms)[0m

